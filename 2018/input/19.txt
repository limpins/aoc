#ip 2
addi 2 16 2 # 00 | r[2]:r[2]+16   * // jump to 0 + 16 (+1) => 17                                        0 0 0 0 0 0 > 0 0 17 0 0 0
seti 1 0 4  # 01 | r[4]:1           // set register 4 to 1                                              0 0 1 10550400 0 10551417 > 0 0 1 10550400 1 10551417
seti 1 0 1  # 02 | r[1]:1           // set register 1 to 1                                              0 0 2 10550400 1 10551417 > 0 1 2 10550400 1 10551417
mulr 4 1 3  # 03 | r[3]:r[4]*r[1]   // multiply register 4 and register 1, store in register 3          0 1 3 10550400 1 10551417 > 0 1 3 1 1 10551417
eqrr 3 5 3  # 04 | r[3]:r[3]=r[5]   // compare register 3 and register 5, store result in register 3    0 1 4 1 1 10551417 > 0 1 4 0 1 10551417
addr 3 2 2  # 05 | r[2]+:r[3]       // add register 3 to register 2 (e.g. jump ahead 1 or 0)            0 1 5 0 1 10551417 > 0 1 5 0 1 10551417
addi 2 1 2  # 06 | r[2]+:1          // increment register 2 by 1                                        0 1 6 0 1 10551417 > 0 1 7 0 1 10551417
addr 4 0 0  # 07 | r[0]+:r[4]     ! // add register 4 to register 0
addi 1 1 1  # 08 | r[1]+:1          // increment register 1 by 1                                        0 1 8 0 1 10551417 > 0 2 8 0 1 10551417
gtrr 1 5 3  # 09 | r[3]:r[1]>r[5]   // register 1 > register 5, store in register 3                     0 2 9 0 1 10551417 > 0 2 9 0 1 10551417
addr 2 3 2  # 10 | r[2]+:r[3]       // add register 3 to register 2 (e.g. jump ahead 1 or 0)            0 2 10 0 1 10551417 > 0 2 10 0 1 10551417
seti 2 5 2  # 11 | r[2]:2         ^ // jump back to instruction 2 + 1 => 3                              0 2 10 0 1 10551417 > 0 2 2 0 1 10551417
addi 4 1 4  # 12 | r[4]+:1          // increment register 4 by 1
gtrr 4 5 3  # 13 | r[3]:r[4]>r[5]   // register 4 > register 5, store in register 3
addr 3 2 2  # 14 | r[2]+:r[3]       // add register 3 to register 2 (e.g. jump ahead 1 or 0)
seti 1 9 2  # 15 | r[2]:1           // set register 2 to 1 (jump back to instruction 2)
mulr 2 2 2  # 16 | r[2]*:r[2]     X // square register 2, store result in register 2
addi 5 2 5  # 17 | r[5]+:2        * // increment register 5 by 2                                        1 0 17 0 0 0      > 1 0 17 0 0 2
mulr 5 5 5  # 18 | r[5]*:r[5]     * // square register 5, store result in register 5                    1 0 18 0 0 2      > 1 0 18 0 0 4
mulr 2 5 5  # 19 | r[5]:r[5]*r[2] * // multiply register 5 by register 2, store result in register 5    1 0 19 0 0 4      > 1 0 19 0 0 76
muli 5 11 5 # 20 | r[5]*:11       * // multiply register 5 by 11, store result in register 5            1 0 20 0 0 76     > 1 0 20 0 0 836
addi 3 8 3  # 21 | r[3]+:8        * // increment register 3 by 8                                        1 0 21 0 0 836    > 1 0 21 8 0 836
mulr 3 2 3  # 22 | r[3]*:r[2]     * // multiply register 3 by register 2                                1 0 22 8 0 836    > 1 0 22 176 0 836
addi 3 5 3  # 23 | r[3]+:5        * // increment register 3 by 5                                        1 0 23 176 0 836  > 1 0 23 181 0 836
addr 5 3 5  # 24 | r[5]+:r[3]     * // add register 3 to register 5, store in register 3                1 0 24 181 0 836  > 1 0 24 181 0 1017
addr 2 0 2  # 25 | r[2]+:r[1]     * // increment ip by value of register 1                              1 0 25 181 0 1017 > 1 0 26 181 0 1017
seti 0 9 2  # 26 | r[2]:0         ! // jump to instruction 1 (only when r == 0)
setr 2 8 3  # 27 | r[3]:r[2]      * // set register 3 to value of register 2                            1 0 27 181 0 1017 > 1 0 27 27 0 1017
mulr 3 2 3  # 28 | r[3]*:r[2]     * // multiply register 3 by register 2                                1 0 28 27 0 1017  > 1 0 28 756 0 1017
addr 2 3 3  # 29 | r[3]+:r[2]     * // add value of register 2 to register 3                            1 0 29 756 0 1017 > 1 0 29 785 0 1017
mulr 2 3 3  # 30 | r[3]*:r[2]     * // multiply register 3 by register 2                                1 0 30 785 0 1017 > 1 0 30 23550 0 1017
muli 3 14 3 # 31 | r[3]*:14       * // multiply register 3 by 14                                        1 0 31 23550 0 1017 > 1 0 31 329700 0 1017
mulr 3 2 3  # 32 | r[3]*:r[2]     * // multiply register 3 by register 2                                1 0 32 329700 0 1017 > 1 0 32 10550400 0 1017
addr 5 3 5  # 33 | r[5]+:r[3]     * // add register 3 to register 5                                     1 0 33 10550400 0 1017 > 1 0 33 10550400 0 10551417
seti 0 6 0  # 34 | r[0]:0         * // set register 0 to 0                                              1 0 34 10550400 0 10551417 > 0 0 34 10550400 0 10551417
seti 0 0 2  # 35 | r[2]:0         ! // jump to instruction 1 (only when r == 1)
